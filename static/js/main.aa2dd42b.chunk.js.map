{"version":3,"sources":["sounds/hisss.wav","notes.js","sounds/annoyed-meow.wav","sounds/hangry-meow.wav","sounds/lion-roar.wav","sounds/smol-meow.wav","index.js"],"names":["notes","key","keycode","sound","audio","hiss","SoundEffects","className","map","eachNote","SoundEffect","props","playAudio","e","inputRef","current","getAttribute","audiosrc","audioRef","Audio","play","useRef","useEffect","document","addEventListener","window","removeEventListener","onTransitionEnd","ref","kbkey","toUpperCase","src","type","ReactDom","render","getElementById"],"mappings":"uIAAe,G,KAAA,IAA0B,mCCK5BA,EAAQ,CACjB,CACIC,IAAK,IACLC,QAAS,IACTC,MAAO,eACPC,MCVO,IAA0B,0CDarC,CACIH,IAAK,IACLC,QAAS,IACTC,MAAO,cACPC,MEjBO,IAA0B,yCFoBrC,CACIH,IAAK,IACLC,QAAS,IACTC,MAAO,aACPC,MAAOC,GAGX,CACIJ,IAAK,IACLC,QAAS,IACTC,MAAO,OACPC,MG/BO,IAA0B,uCHkCrC,CACIH,IAAK,IACLC,QAAS,IACTC,MAAO,YACPC,MItCO,IAA0B,wC,OCKzC,SAASE,IAEP,OACE,qBAAKC,UAAU,UAAf,SACCP,EAAMQ,KAAK,SAACC,GACX,OAAO,cAAC,EAAD,CAAgCA,SAAUA,GAAxBA,EAASR,UAOtC,IAAMS,EAAc,SAACC,GACnB,MAAgCA,EAAMF,SAA/BP,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,MAIjBQ,EAAY,SAACC,GACjB,GAAIC,EAASC,QAAQC,aAAa,WAAaH,EAAEZ,IAAI,CACnDa,EAASC,QAAQR,WAAa,WAC9B,IAAIU,EAAWC,EAASH,QAAQC,aAAa,OAC3B,IAAIG,MAAMF,GAChBG,SASVN,EAAWO,mBACXH,EAAWG,mBAQjB,OALAC,qBAAW,WAET,OADAC,SAASC,iBAAiB,UAAWZ,GAC9B,kBAAMa,OAAOC,oBAAoB,UAAWd,OAInD,sBAAKe,gBAdkB,SAACd,GACtBC,EAASC,QAAQR,UAAY,SAaUqB,IAAKd,EAAUe,MAAO3B,EAASK,UAAU,QAAlF,UACE,mCAAML,EAAQ4B,iBACd,kCAAK3B,KACL,gCACG,wBAAQyB,IAAKV,EAAUa,IAAK3B,EAAO4B,KAAK,oBAOnDC,IAASC,OAAO,cAAC5B,EAAD,IAAkBiB,SAASY,eAAe,U","file":"static/js/main.aa2dd42b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/hisss.72f3f397.wav\";","import hiss from './sounds/hisss.wav'\nimport annoyed from './sounds/annoyed-meow.wav'\nimport hangry from './sounds/hangry-meow.wav'\nimport roar from './sounds/lion-roar.wav'\nimport smol from './sounds/smol-meow.wav'\nexport const notes = [\n    {\n        key: '1',\n        keycode: 'c',\n        sound: 'Annoyed Meow',\n        audio: annoyed,\n    },\n\n    {\n        key: '2',\n        keycode: 'd',\n        sound: 'Hangry Meow',\n        audio: hangry,\n    },\n\n    {\n        key: '3',\n        keycode: 'e',\n        sound: 'Hissy Meow',\n        audio: hiss,\n    },\n\n    {\n        key: '4',\n        keycode: 'f',\n        sound: 'ROAR',\n        audio: roar,\n    },\n\n    {\n        key: '5',\n        keycode: 'g',\n        sound: 'Smol Meow',\n        audio: smol,\n    },\n\n]","export default __webpack_public_path__ + \"static/media/annoyed-meow.3fd87f3c.wav\";","export default __webpack_public_path__ + \"static/media/hangry-meow.9f8cabaf.wav\";","export default __webpack_public_path__ + \"static/media/lion-roar.041929ce.wav\";","export default __webpack_public_path__ + \"static/media/smol-meow.285170a9.wav\";","import React, { useEffect, useRef } from 'react';\nimport ReactDom from 'react-dom';\nimport './index.css'\nimport { notes } from './notes';\n\nfunction SoundEffects() {\n\n  return (\n    <div className='flexbox'>\n    {notes.map( (eachNote) => {\n      return <SoundEffect key={eachNote.key} eachNote={eachNote} /> \n    })}\n    </div>\n    );\n  }\n  \n  \n  const SoundEffect = (props) => {\n    const {keycode, sound, audio} = props.eachNote;\n\n    \n    \n    const playAudio = (e) => {\n      if (inputRef.current.getAttribute('kbkey') === e.key){\n        inputRef.current.className += ' playing'\n        let audiosrc = audioRef.current.getAttribute('src');\n        let audioToPlay = new Audio(audiosrc);\n        audioToPlay.play();\n        \n      }\n    }\n\n    const handleTransition = (e) => {\n        inputRef.current.className = 'sound';\n    }\n\n    const inputRef = useRef();\n    const audioRef = useRef();\n\n    //play audio if selected key is down\n    useEffect( ()=> {\n      document.addEventListener('keydown', playAudio)\n      return () => window.removeEventListener('keydown', playAudio) //cleanup\n    })\n \n    return (\n      <div onTransitionEnd={handleTransition}  ref={inputRef} kbkey={keycode} className='sound'> \n        <h1> {keycode.toUpperCase()}</h1>\n        <p> {sound}</p>\n        <audio>\n           <source ref={audioRef} src={audio} type=\"audio/wav\"></source>\n        </audio>\n  </div>\n  )\n} \n\n\nReactDom.render(<SoundEffects />, document.getElementById('root'));"],"sourceRoot":""}